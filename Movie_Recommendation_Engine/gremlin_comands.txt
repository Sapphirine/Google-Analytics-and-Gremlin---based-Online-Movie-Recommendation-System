gremlin> g = new Neo4jGraph('/tmp/movieRatings')

gremlin> g.setMaxBufferSize(1000)

gremlin> occupations = [0:'other', 1:'academic/educator', 2:'artist',
  3:'clerical/admin', 4:'college/grad student', 5:'customer service',
  6:'doctor/health care', 7:'executive/managerial', 8:'farmer',
  9:'homemaker', 10:'K-12 student', 11:'lawyer', 12:'programmer',
  13:'retired', 14:'sales/marketing', 15:'scientist', 16:'self-employed',
  17:'technician/engineer', 18:'tradesman/craftsman', 19:'unemployed', 20:'writer'] 


gremlin> new File('movies.dat').eachLine {def line ->
 def components = line.split('::');
 def movieVertex = g.addVertex(['type':'Movie', 'movieId':components[0].toInteger(), 'title':components[1]]);
 components[2].split('\\|').each { def genera ->
 def hits = g.idx(T.v)[[genera:genera]].iterator();
 def generaVertex = hits.hasNext() ? hits.next() : g.addVertex(['type':'Genera', 'genera':genera]);
  g.addEdge(movieVertex, generaVertex, 'hasGenera');
  }
}

gremlin> new File('users.dat').eachLine {def line ->
def components = line.split('::');
def userVertex = g.addVertex(['type':'User', 'userId':components[0].toInteger(), 'gender':components[1], 'age':components[2].toInteger()]);
def occupation = occupations[components[3].toInteger()];
def hits = g.idx(T.v)[[occupation:occupation]].iterator();
def occupationVertex = hits.hasNext() ? hits.next() : g.addVertex(['type':'Occupation', 'occupation':occupation]);
 g.addEdge(userVertex, occupationVertex, 'hasOccupation');
}

gremlin> new File('ratings.dat').eachLine {def line ->def components = line.split('::');
def ratedEdge = g.addEdge(g.idx(T.v)[[userId:components[0].toInteger()]].next(), g.idx(T.v)[[movieId:components[1].toInteger()]].next(), 'rated');
ratedEdge.setProperty('stars', components[2].toInteger());
}

gremlin> v = g.idx(T.v)[[movieId:1]] >> 1

gremlin> m = [:]

gremlin> x = [] as Set

gremlin> Gremlin.defineStep('corated',[Vertex,Pipe], { def stars -> _().inE('rated').filter{it.getProperty('stars') > stars}.outV.outE('rated').filter{it.getProperty('stars') > stars}.inV})

gremlin> v.out('hasGenera').aggregate(x).back(2).corated(3).filter{it != v}.filter{it.out('hasGenera')>>[] as Set == x}.title.groupCount(m) >> -1

gremlin> v.out('hasGenera').aggregate(x).back(2).corated(3).filter{it != v}.filter{it.out('hasGenera')>>[] as Set == x}.movieId.groupCount(m) >> -1

gremlin> m.sort{a,b -> b.value <=> a.value}[0..9]
